# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from outdoor_gcs/PathPlan.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PathPlan(genpy.Message):
  _md5sum = "fd0ba91e4fa13527e6deb13cd9ac383a"
  _type = "outdoor_gcs/PathPlan"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header   

string alg
int8 num ## max 9
bool[9] uavs_id 
bool start
float64[27] cur_position
float64[27] des_position
float64[27] nxt_position
float64[27] cur_velocity
float64[10] params
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','alg','num','uavs_id','start','cur_position','des_position','nxt_position','cur_velocity','params']
  _slot_types = ['std_msgs/Header','string','int8','bool[9]','bool','float64[27]','float64[27]','float64[27]','float64[27]','float64[10]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,alg,num,uavs_id,start,cur_position,des_position,nxt_position,cur_velocity,params

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathPlan, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.alg is None:
        self.alg = ''
      if self.num is None:
        self.num = 0
      if self.uavs_id is None:
        self.uavs_id = [False] * 9
      if self.start is None:
        self.start = False
      if self.cur_position is None:
        self.cur_position = [0.] * 27
      if self.des_position is None:
        self.des_position = [0.] * 27
      if self.nxt_position is None:
        self.nxt_position = [0.] * 27
      if self.cur_velocity is None:
        self.cur_velocity = [0.] * 27
      if self.params is None:
        self.params = [0.] * 10
    else:
      self.header = std_msgs.msg.Header()
      self.alg = ''
      self.num = 0
      self.uavs_id = [False] * 9
      self.start = False
      self.cur_position = [0.] * 27
      self.des_position = [0.] * 27
      self.nxt_position = [0.] * 27
      self.cur_velocity = [0.] * 27
      self.params = [0.] * 10

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.alg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.num
      buff.write(_get_struct_b().pack(_x))
      buff.write(_get_struct_9B().pack(*self.uavs_id))
      _x = self.start
      buff.write(_get_struct_B().pack(_x))
      buff.write(_get_struct_27d().pack(*self.cur_position))
      buff.write(_get_struct_27d().pack(*self.des_position))
      buff.write(_get_struct_27d().pack(*self.nxt_position))
      buff.write(_get_struct_27d().pack(*self.cur_velocity))
      buff.write(_get_struct_10d().pack(*self.params))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.alg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.alg = str[start:end]
      start = end
      end += 1
      (self.num,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 9
      self.uavs_id = _get_struct_9B().unpack(str[start:end])
      self.uavs_id = list(map(bool, self.uavs_id))
      start = end
      end += 1
      (self.start,) = _get_struct_B().unpack(str[start:end])
      self.start = bool(self.start)
      start = end
      end += 216
      self.cur_position = _get_struct_27d().unpack(str[start:end])
      start = end
      end += 216
      self.des_position = _get_struct_27d().unpack(str[start:end])
      start = end
      end += 216
      self.nxt_position = _get_struct_27d().unpack(str[start:end])
      start = end
      end += 216
      self.cur_velocity = _get_struct_27d().unpack(str[start:end])
      start = end
      end += 80
      self.params = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.alg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.num
      buff.write(_get_struct_b().pack(_x))
      buff.write(self.uavs_id.tostring())
      _x = self.start
      buff.write(_get_struct_B().pack(_x))
      buff.write(self.cur_position.tostring())
      buff.write(self.des_position.tostring())
      buff.write(self.nxt_position.tostring())
      buff.write(self.cur_velocity.tostring())
      buff.write(self.params.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.alg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.alg = str[start:end]
      start = end
      end += 1
      (self.num,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 9
      self.uavs_id = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=9)
      self.uavs_id = list(map(bool, self.uavs_id))
      start = end
      end += 1
      (self.start,) = _get_struct_B().unpack(str[start:end])
      self.start = bool(self.start)
      start = end
      end += 216
      self.cur_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=27)
      start = end
      end += 216
      self.des_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=27)
      start = end
      end += 216
      self.nxt_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=27)
      start = end
      end += 216
      self.cur_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=27)
      start = end
      end += 80
      self.params = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=10)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
_struct_27d = None
def _get_struct_27d():
    global _struct_27d
    if _struct_27d is None:
        _struct_27d = struct.Struct("<27d")
    return _struct_27d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
