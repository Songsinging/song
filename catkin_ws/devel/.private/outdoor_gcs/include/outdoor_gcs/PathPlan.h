// Generated by gencpp from file outdoor_gcs/PathPlan.msg
// DO NOT EDIT!


#ifndef OUTDOOR_GCS_MESSAGE_PATHPLAN_H
#define OUTDOOR_GCS_MESSAGE_PATHPLAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace outdoor_gcs
{
template <class ContainerAllocator>
struct PathPlan_
{
  typedef PathPlan_<ContainerAllocator> Type;

  PathPlan_()
    : header()
    , alg()
    , num(0)
    , uavs_id()
    , start(false)
    , cur_position()
    , des_position()
    , nxt_position()
    , cur_velocity()
    , params()  {
      uavs_id.assign(false);

      cur_position.assign(0.0);

      des_position.assign(0.0);

      nxt_position.assign(0.0);

      cur_velocity.assign(0.0);

      params.assign(0.0);
  }
  PathPlan_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , alg(_alloc)
    , num(0)
    , uavs_id()
    , start(false)
    , cur_position()
    , des_position()
    , nxt_position()
    , cur_velocity()
    , params()  {
  (void)_alloc;
      uavs_id.assign(false);

      cur_position.assign(0.0);

      des_position.assign(0.0);

      nxt_position.assign(0.0);

      cur_velocity.assign(0.0);

      params.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _alg_type;
  _alg_type alg;

   typedef int8_t _num_type;
  _num_type num;

   typedef boost::array<uint8_t, 9>  _uavs_id_type;
  _uavs_id_type uavs_id;

   typedef uint8_t _start_type;
  _start_type start;

   typedef boost::array<double, 27>  _cur_position_type;
  _cur_position_type cur_position;

   typedef boost::array<double, 27>  _des_position_type;
  _des_position_type des_position;

   typedef boost::array<double, 27>  _nxt_position_type;
  _nxt_position_type nxt_position;

   typedef boost::array<double, 27>  _cur_velocity_type;
  _cur_velocity_type cur_velocity;

   typedef boost::array<double, 10>  _params_type;
  _params_type params;





  typedef boost::shared_ptr< ::outdoor_gcs::PathPlan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::outdoor_gcs::PathPlan_<ContainerAllocator> const> ConstPtr;

}; // struct PathPlan_

typedef ::outdoor_gcs::PathPlan_<std::allocator<void> > PathPlan;

typedef boost::shared_ptr< ::outdoor_gcs::PathPlan > PathPlanPtr;
typedef boost::shared_ptr< ::outdoor_gcs::PathPlan const> PathPlanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::outdoor_gcs::PathPlan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::outdoor_gcs::PathPlan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::outdoor_gcs::PathPlan_<ContainerAllocator1> & lhs, const ::outdoor_gcs::PathPlan_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.alg == rhs.alg &&
    lhs.num == rhs.num &&
    lhs.uavs_id == rhs.uavs_id &&
    lhs.start == rhs.start &&
    lhs.cur_position == rhs.cur_position &&
    lhs.des_position == rhs.des_position &&
    lhs.nxt_position == rhs.nxt_position &&
    lhs.cur_velocity == rhs.cur_velocity &&
    lhs.params == rhs.params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::outdoor_gcs::PathPlan_<ContainerAllocator1> & lhs, const ::outdoor_gcs::PathPlan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace outdoor_gcs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::outdoor_gcs::PathPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::outdoor_gcs::PathPlan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::outdoor_gcs::PathPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::outdoor_gcs::PathPlan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::outdoor_gcs::PathPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::outdoor_gcs::PathPlan_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::outdoor_gcs::PathPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd0ba91e4fa13527e6deb13cd9ac383a";
  }

  static const char* value(const ::outdoor_gcs::PathPlan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd0ba91e4fa13527ULL;
  static const uint64_t static_value2 = 0xe6deb13cd9ac383aULL;
};

template<class ContainerAllocator>
struct DataType< ::outdoor_gcs::PathPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "outdoor_gcs/PathPlan";
  }

  static const char* value(const ::outdoor_gcs::PathPlan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::outdoor_gcs::PathPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header   \n"
"\n"
"string alg\n"
"int8 num ## max 9\n"
"bool[9] uavs_id \n"
"bool start\n"
"float64[27] cur_position\n"
"float64[27] des_position\n"
"float64[27] nxt_position\n"
"float64[27] cur_velocity\n"
"float64[10] params\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::outdoor_gcs::PathPlan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::outdoor_gcs::PathPlan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.alg);
      stream.next(m.num);
      stream.next(m.uavs_id);
      stream.next(m.start);
      stream.next(m.cur_position);
      stream.next(m.des_position);
      stream.next(m.nxt_position);
      stream.next(m.cur_velocity);
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathPlan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::outdoor_gcs::PathPlan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::outdoor_gcs::PathPlan_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "alg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.alg);
    s << indent << "num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num);
    s << indent << "uavs_id[]" << std::endl;
    for (size_t i = 0; i < v.uavs_id.size(); ++i)
    {
      s << indent << "  uavs_id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.uavs_id[i]);
    }
    s << indent << "start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start);
    s << indent << "cur_position[]" << std::endl;
    for (size_t i = 0; i < v.cur_position.size(); ++i)
    {
      s << indent << "  cur_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cur_position[i]);
    }
    s << indent << "des_position[]" << std::endl;
    for (size_t i = 0; i < v.des_position.size(); ++i)
    {
      s << indent << "  des_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.des_position[i]);
    }
    s << indent << "nxt_position[]" << std::endl;
    for (size_t i = 0; i < v.nxt_position.size(); ++i)
    {
      s << indent << "  nxt_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.nxt_position[i]);
    }
    s << indent << "cur_velocity[]" << std::endl;
    for (size_t i = 0; i < v.cur_velocity.size(); ++i)
    {
      s << indent << "  cur_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cur_velocity[i]);
    }
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.params[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OUTDOOR_GCS_MESSAGE_PATHPLAN_H
